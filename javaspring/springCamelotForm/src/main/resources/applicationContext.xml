<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:util="http://www.springframework.org/schema/util"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xsi:schemaLocation="http://www.springframework.org/schema/beans 
            http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
          http://www.springframework.org/schema/aop 
            http://www.springframework.org/schema/aop/spring-aop-4.0.xsd
          http://www.springframework.org/schema/util
            http://www.springframework.org/schema/util/spring-util-4.0.xsd
            http://www.springframework.org/schema/context
			http://www.springframework.org/schema/context/spring-context-4.0.xsd
			http://www.springframework.org/schema/tx
           http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
           http://www.springframework.org/schema/mvc
			http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd"
			default-autowire="byName">

<bean id="merlin" class="com.courtalon.springCamelotForm.beans.QueteBuilder" />
<bean id="augias" class="com.courtalon.springCamelotForm.beans.Ecurie">
	<property name="nomChevaux">
		<list>
			<value>tonerre</value>
			<value>pegase</value>
			<value>jolly jumper</value>
			<value>ourasi</value>
		</list>
	</property>
</bean>

<!--  lazy-init indique a spring de ne creer ce bean que si necessaire 
	par defaut, spring creer tous les beans au demarrage du contexte 
	prototype indique de ne pas reutiliser la meme instance du bean
	s'il est injecte plusieurs fois -->
<bean id="cheval3" class="com.courtalon.springCamelotForm.beans.Cheval"
	 factory-bean="augias" factory-method="fournirCheval"
	 scope="prototype"
	 lazy-init="true" />

<bean id="roland"
	class="com.courtalon.springCamelotForm.beans.ChevalierTableRonde"
	lazy-init="true">
	<property name="nom"  value="roland"/>
	<property name="reussite" value="0.5" />
	<property name="monture" ref="cheval3"/>
	<property name="quete">
		<bean 	class="com.courtalon.springCamelotForm.beans.QueteEpique"
				factory-bean="merlin"
				factory-method="obtenirQuete" />
	</property>
</bean>


<bean id="quete1" class="com.courtalon.springCamelotForm.beans.QueteBasique">
	<property name="description" value="nettoyer les ecuries" />
	<property name="difficulte" value="0.2"/>
</bean>

<bean id="quete2" class="com.courtalon.springCamelotForm.beans.QueteBasique">
	<property name="description" value="compter les pierres du chateau" />
	<property name="difficulte" value="0.4"/>
</bean>



<bean 	id="quete3"
		class="com.courtalon.springCamelotForm.beans.QueteEpique"
		factory-bean="merlin"
		factory-method="obtenirQuete"/>


<bean id="jacqouille" class="com.courtalon.springCamelotForm.beans.ChevalierBasique">
	<property name="nom" value="jacqouille"/>
	<property name="reussite" value="0.4"/>
	<property name="quete" ref="quete1" />
</bean>

<bean id="perceval" class="com.courtalon.springCamelotForm.beans.ChevalierTableRonde">
	<property name="nom" value="perceval"/>
	<property name="reussite" value="0.5"/>
	<property name="quete" ref="quete2" />
	<property name="monture">
		<bean class="com.courtalon.springCamelotForm.beans.Cheval">
			<property name="nom" value="trainePatte" />
		</bean>
	</property>
</bean>

<bean id="caradoc" class="com.courtalon.springCamelotForm.beans.ChevalierTableRonde">
	<property name="nom" value="caradoc"/>
	<property name="reussite" value="0.3"/>
	<property name="quete" ref="quete3" />
	<property name="monture">
		<bean class="com.courtalon.springCamelotForm.beans.Cheval">
			<property name="nom" value="bayonne" />
		</bean>
	</property>
</bean>

<bean id="assurancetourix" class="com.courtalon.springCamelotForm.beans.Menestrel">
	<constructor-arg index="0" value="assurancetourix" />
</bean>

<!-- configuration de l'AOP pour notre projet -->
<aop:config>
	<!--  defini assurancetourix comme fournisseur de "conseil/advice", du code a inserer -->
	<aop:aspect ref="assurancetourix">
		<!--  le point de coupe séléctionne les methodes du projets sur lequel on peu appliquer un advice -->
		<aop:pointcut 
expression="execution(* com.courtalon.springCamelotForm.beans.IChevalier.partir*(..)) and target(bean)"
id="tousChevalier"/>
		<aop:pointcut 
expression="execution(* com.courtalon.springCamelotForm.beans.ChevalierTable*.partir*(..)) and target(bean)"
id="ChevalierTable"/>

		<!-- applique un advice avant l'appel de méthode, en spécifiant la methode advice a appeler
		et le point de coup a utiliser. A noter, notre methode d'advice recoit en parametre
		le bean sur lequel est applique le conseil, ici, le chevalier concerne -->
		<aop:before method="chanterAvant"
					pointcut-ref="tousChevalier"
					arg-names="bean"/>
		<aop:after-returning method="chanterApres"
					pointcut-ref="ChevalierTable"
					arg-names="bean"/>
					
	</aop:aspect>

</aop:config>

</beans>
